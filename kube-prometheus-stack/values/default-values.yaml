# values.yaml for kube-prometheus-stack

## Global settings
##
global:
  # Timezone for all components
  # timezone: "Europe/Kyiv"
  imagePullSecrets: [] 
  # Image settings
  # image:
  #   repository: quay.io/prometheus-community/prometheus
  #   tag: "v2.47.0"
  #   pullPolicy: IfNotPresent

## Grafana configuration
##
grafana:
  enabled: true
  
  # Administrative settings
  adminUser: admin
  adminPassword: prom-operator
  
  # Dashboards and data sources
  defaultDashboardsEnabled: true
  dashboardProviders: 
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default
  
  # Automatic dashboard discovery
  sidecar:
    dashboards:
      enabled: true
      label: grafana_dashboard
    datasources:
      enabled: true
      label: grafana_datasource
  
  # Ingress for external access
  ingress:
    enabled: true
    # hosts:
    #   - grafana.local
    # annotations:
    #   kubernetes.io/ingress.class: nginx
    #   cert-manager.io/cluster-issuer: letsencrypt-prod
    # tls:
    #   - secretName: grafana-tls
    #     hosts:
    #       - grafana.local

## Prometheus configuration
##
prometheus:
  enabled: true
  
  # Service type - LoadBalancer for external access
  prometheusSpec:
    serviceMonitorSelector: {}
    serviceMonitorNamespaceSelector: {}
    podMonitorSelector: {}
    podMonitorNamespaceSelector: {}
    
    # Data retention
    retention: 10d  # Metrics retention period
    retentionSize: "50GB"  # Maximum storage size
    
    # Resource limits
    resources:
      requests:
        memory: 2Gi
        cpu: 500m
      limits:
        memory: 4Gi
        cpu: 1000m
    
    # Persistent storage with StatefulSet
    # storageSpec:
    #   volumeClaimTemplate:
    #     spec:
    #       storageClassName: fast-ssd
    #       accessModes: ["ReadWriteOnce"]
    #       resources:
    #         requests:
    #           storage: 100Gi

## Alertmanager configuration
##
alertmanager:
  enabled: true
  
  alertmanagerSpec:
    # Alerting configuration
    # config:
    #   global:
    #     smtp_smarthost: 'smtp.gmail.com:587'
    #     smtp_from: 'alertmanager@example.com'
    #     smtp_auth_username: 'user@gmail.com'
    #     smtp_auth_password: 'password'
    #   route:
    #     group_by: ['job']
    #     group_wait: 10s
    #     group_interval: 10s
    #     repeat_interval: 1h
    #     receiver: 'email-notifications'
    #   receivers:
    #     - name: 'email-notifications'
    #       email_configs:
    #         - to: 'admin@example.com'
    
    resources:
      requests:
        memory: 100Mi
        cpu: 100m
      limits:
        memory: 200Mi
        cpu: 200m

## Windows Expoerter for Windows node metrics
prometheus-windows-exporter:

  prometheus:
    monitor:
      enabled: false
      jobLabel: jobLabel

## Node Exporter for node-level metrics
##
nodeExporter:
  enabled: true
  
  # Settings for collecting node metrics
  # tolerations:
  #   - effect: NoSchedule
  #     operator: Exists
  #   - effect: NoExecute
  #     operator: Exists

## Kube State Metrics for Kubernetes resource metrics
##
kubeStateMetrics:
  enabled: true
  
  # Collection of Kubernetes resource metrics
  resources:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 256Mi
      cpu: 200m

## Alerting rules
##
customRules: {}
  # AlertmanagerFailedReload:
  #   for: 3m
  # AlertmanagerMembersInconsistent:
  #   for: 5m
  #   severity: "warning"

## Create default rules for monitoring the cluster
##
defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: true
    configReloaders: true
    general: true
    k8sContainerCpuUsageSecondsTotal: true
    k8sContainerMemoryCache: true
    k8sContainerMemoryRss: true
    k8sContainerMemorySwap: true
    k8sContainerResource: true
    k8sContainerMemoryWorkingSetBytes: true
    k8sPodOwner: true
    kubeApiserverAvailability: true
    kubeApiserverBurnrate: true
    kubeApiserverHistogram: true
    kubeApiserverSlos: true
    kubeControllerManager: true
    kubelet: true
    kubeProxy: true
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeSchedulerAlerting: true
    kubeSchedulerRecording: true
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true
    windows: false

## Prometheus Operator
##
prometheusOperator:
  enabled: true
  
  # Controller for managing Prometheus resources
  admissionWebhooks:
    enabled: true
    patch:
      enabled: true
  
  resources:
    requests:
      memory: 200Mi
      cpu: 100m
    limits:
      memory: 400Mi
      cpu: 200m

## ServiceMonitor for automatic service discovery
##
# Additional ServiceMonitors can be added here
additionalServiceMonitors: []
# - name: example-service
#   selector:
#     matchLabels:
#       app: example-app
#   namespaceSelector:
#     matchNames:
#       - default
#   endpoints:
#     - port: web
#       path: /metrics

## Additional Grafana dashboards
##
additionalDashboards: []
# - name: my-custom-dashboard
#   label: my-dashboard
#   file: my-dashboard.json

## Security and RBAC
##
rbac:
  create: true  # Automatic RBAC rules creation

psp:
  create: false  # Pod Security Policies (deprecated)

## Namespace settings
##
namespaceOverride: ""  # If deployment to different namespace is needed

## Additional security settings
##
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000